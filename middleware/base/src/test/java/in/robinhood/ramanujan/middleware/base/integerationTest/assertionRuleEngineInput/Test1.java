package in.robinhood.ramanujan.middleware.base.integerationTest.assertionRuleEngineInput;

public class Test1 {
    public static String assertions = "{\n" +
            "    \"variables\":[\n" +
            "        {\n" +
            "            \"id\":\"varx\",\n" +
            "            \"name\":\"x\",\n" +
            "            \"dataType\":\"integer\"\n" +
            "        }, {\n" +
            "            \"id\":\"varz\",\n" +
            "            \"name\":\"z\",\n" +
            "            \"dataType\":\"integer\"\n" +
            "        }\n" +
            "    ],\n" +
            "    \"constants\":[\n" +
            "        {\n" +
            "            \"id\":\"c10\",\n" +
            "            \"value\":\"10.0\",\n" +
            "            \"dataType\":\"Double\"\n" +
            "        },\n" +
            "        {\n" +
            "            \"id\":\"c11\",\n" +
            "            \"value\":\"11.0\",\n" +
            "            \"dataType\":\"Double\"\n" +
            "        },\n" +
            "        {\n" +
            "            \"id\":\"c12\",\n" +
            "            \"value\":\"11.0\",\n" +
            "            \"dataType\":\"Double\"\n" +
            "        }\n" +
            "    ],\n" +
            "    \"operations\":[\n" +
            "        {\n" +
            "            \"id\":\"o1\",\n" +
            "            \"operatorType\":\"=\",\n" +
            "            \"operand1\":\"com1o1\",\n" +
            "            \"operand2\":\"com2o1\"\n" +
            "        },\n" +
            "        {\n" +
            "            \"id\":\"o2\",\n" +
            "            \"operatorType\":\"=\",\n" +
            "            \"operand1\":\"com1o2\",\n" +
            "            \"operand2\":\"com2o2\"\n" +
            "        },\n" +
            "        {\n" +
            "            \"id\":\"o3\",\n" +
            "            \"operatorType\":\"=\",\n" +
            "            \"operand1\":\"com1o3\",\n" +
            "            \"operand2\":\"com2o3\"\n" +
            "        }\n" +
            "    ],\n" +
            "    \"ifBlocks\":[{\n" +
            "        \"id\":\"i1\",\n" +
            "        \"conditionId\":\"condition\",\n" +
            "        \"ifCommand\":\"com1i1\",\n" +
            "        \"elseCommandId\":\"com2i1\"   \n" +
            "    }],\n" +
            "    \"conditions\":[\n" +
            "        {\n" +
            "            \"id\":\"condition\",\n" +
            "            \"conditionType\":\"<\",\n" +
            "            \"comparisionCommand1\":\"com1condition1\",\n" +
            "            \"comparisionCommand2\":\"com2condition1\"\n" +
            "        }\n" +
            "    ],\n" +
            "    \"commands\":[\n" +
            "        {\n" +
            "            \"id\":\"com1\",\n" +
            "            \"nextId\":\"com2\"\n" +
            "        }, {\n" +
            "            \"id\":\"com2\",\n" +
            "            \"nextId\":\"com3\"\n" +
            "        }, {\n" +
            "            \"id\":\"com3\",\n" +
            "            \"nextId\":\"com4\",\n" +
            "            \"operation\":\"o1\"\n" +
            "        },\n" +
            "         {\n" +
            "             \"id\":\"com1condition1\",\n" +
            "             \"variableId\":\"varx\"\n" +
            "         },\n" +
            "        {\n" +
            "            \"id\":\"com2condition1\",\n" +
            "            \"constant\":\"c11\"\n" +
            "        },\n" +
            "        {\n" +
            "            \"id\":\"com1o2\",\n" +
            "            \"variableId\":\"varz\"\n" +
            "        },\n" +
            "        {\n" +
            "            \"id\":\"com2o2\",\n" +
            "            \"variableId\":\"varx\"\n" +
            "        },\n" +
            "        {\n" +
            "            \"id\":\"com1o3\",\n" +
            "            \"variableId\":\"varz\"\n" +
            "        },\n" +
            "        {\n" +
            "            \"id\":\"com2o3\",\n" +
            "            \"constant\":\"c11\"\n" +
            "        },\n" +
            "        {\n" +
            "            \"id\":\"com1i1\",\n" +
            "            \"operation\":\"o2\"\n" +
            "        },\n" +
            "        {\n" +
            "            \"id\":\"com2i1\",\n" +
            "            \"operation\":\"o3\"\n" +
            "        },\n" +
            "        {\n" +
            "            \"id\":\"com1o1\",\n" +
            "            \"variableId\":\"varx\"\n" +
            "        },{\n" +
            "            \"id\":\"com2o1\",\n" +
            "            \"constant\":\"c10\"\n" +
            "        },\n" +
            "        {\n" +
            "            \"id\":\"com4\",\n" +
            "            \"ifBlocks\":\"i1\"\n" +
            "        }\n" +
            "    ]\n" +
            "}";
}
