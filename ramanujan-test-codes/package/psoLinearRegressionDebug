var train:array;
var i:integer;
{i}={0};
while({i}<{100}) {
  {train[i]}={{{i}*{1.8}}+{32}};
  {i}={{i}+{1}};
}
def mainCode(var train : array, var x1:double, var y1:double) {
  var x1,y1,j,avg,diff1,diff2x,diff2y,tmp:double;
  {j}={0};
  var testArr:array;
  var slope:double;
  var nexty,nextx:double;
  {testArr[1]}={1};
  while({j}<{100}) {
    exec getTestArr(x1,y1,testArr);
    exec getAvg(testArr, train, diff1);

    {tmp} ={{x1}+{0.0001}};
    exec getTestArr(tmp,y1,testArr);
    exec getAvg(testArr, train, diff2x);

    {slope}={{{diff2x}-{diff1}}/{0.0001}};
    {nextx}={{x1}-{{slope}*{0.1}}};


    {tmp} ={{y1}+{0.0001}};
    exec getTestArr(x1,tmp,testArr);
    exec getAvg(testArr, train, diff2y);

    {slope}={{{diff2y}-{diff1}}/{0.0001}};
    {nexty}={{y1}-{{slope}*{0.50}}};

    {x1}={nextx};
    {y1}={nexty};

    {j}={{j}+{1}};
  }
}
var x1,y1:array;
{x1[0][0]}={0};
{y1[0][0]} = {0};
var ansX1,ansy1 :double;
{ansX1}={0};
{ansy1}={0};
var iteration:array;
{i}={0};
while({i} < {10}) {
  {iteration[i]}={0};
  {i}={{i}+{1}};
}



threadStart(t0) {
  exec posRun(0, train, x1, y1,iteration);
  {iteration[0]}={{iteration[0]}+{1}};
}

threadStart(t1) {
  exec posRun(1, train, x1, y1,iteration);
  {iteration[1]}={{iteration[1]}+{1}};

}
threadStart(t2) {
  exec posRun(2, train, x1, y1,iteration);
  {iteration[2]}={{iteration[2]}+{1}};

}
threadStart(t3) {
  exec posRun(3, train, x1, y1,iteration);
  {iteration[3]}={{iteration[3]}+{1}};

}
threadStart(t4) {
  exec posRun(4, train, x1, y1,iteration);
  {iteration[4]}={{iteration[4]}+{1}};

}
threadStart(t5) {
  exec posRun(5, train, x1, y1,iteration);
  {iteration[5]}={{iteration[5]}+{1}};

}
threadStart(t6) {
  exec posRun(6, train, x1, y1,iteration);
  {iteration[6]}={{iteration[6]}+{1}};

}
threadStart(t7) {
  exec posRun(7, train, x1, y1,iteration);
  {iteration[7]}={{iteration[7]}+{1}};

}
threadStart(t8) {
  exec posRun(8, train, x1, y1,iteration);
  {iteration[8]}={{iteration[8]}+{1}};

}
threadStart(t9) {
  exec posRun(9, train, x1, y1,iteration);
  {iteration[9]}={{iteration[9]}+{1}};

}

threadOnEnd(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,1) {
  var best:integer;
  {best}={0};
  exec getBest(train, best, x1, y1, 0);
  {ansX1}={x1[best][0]};
  {ansy1}={y1[best][0]};
}
