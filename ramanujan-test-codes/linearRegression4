def getSquared(var xPow:integer, var yPow:integer, var ans:integer) {  if({xPow}<{yPow}) {{    {ans}={{yPow}-{xPow}};  }else{    {ans}={{xPow}-{yPow}};  }}}def getAvg(var arr:array, var originalArr:array, var avgF:integer) {  var index,ans1,tmpAvg1,tmpAvg2:integer;  {avgF}={0};  {index}={0};  while({index}<{100}) {      {tmpAvg1}={arr[index]};      {tmpAvg2}={originalArr[index]};      exec getSquared(tmpAvg1,tmpAvg2, ans1);      {avgF}={{avgF}+{ans1}};      {index}={{index}+{1}};  }  {avgF}={{avgF}/{100}};}def getTestArr(var xTest:integer, var yTest:integer, var testArrTest:array) {  var it:integer;  {it}={0};  while({it}<{100}) {    {testArrTest[it]}={{{xTest}*{it}}+{yTest}};    {it}={{it}+{1}};  }}var train:array;var i:integer;{i}={0};while({i}<{100}) {  {train[i]}={{{i}*{1.8}}+{32}};  {i}={{i}+{1}};}var x1,y1,j,avg,diff1,diff2x,diff2y,tmp:double;{x1}={1};{y1}={1};{j}={0};var testArr:array;var slope:double;var nexty,nextx:double;{testArr[1]}={1};while({j}<{1}) {  exec getTestArr(x1,y1,testArr);  exec getAvg(testArr, train, diff1);  {tmp} ={{x1}+{0.0001}};  exec getTestArr(tmp,y1,testArr);  exec getAvg(testArr, train, diff2x);  {slope}={{{diff2x}-{diff1}}/{0.0001}};  {nextx}={{x1}-{{slope}*{0.01}}};  {tmp} ={{y1}+{0.0001}};  exec getTestArr(x1,tmp,testArr);  exec getAvg(testArr, train, diff2y);  {slope}={{{diff2y}-{diff1}}/{0.0001}};  {nexty}={{y1}-{{slope}*{0.01}}};  {x1}={nextx};  {y1}={nexty};  {j}={{j}+{1}};}